<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分布式锁</title>
    <url>/2019/01/03/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>为了保证一个方法或属性在高并发情况下的同一时间只能被一个线程访问，在单机部署的情况下，可以使用ReentrantLock或Synchronized进行互斥控制。随着发展，单机部署的系统已经不能满足业务的需要，越来越多的系统进化成分布式集群系统，原本在单机运行的锁控制已经不能实现“一个方法或属性在高并发情况下的同一时间只能被一个线程访问”的控制，要在分布式系统中实现在单机中的控制效果就必须使用分布式锁。</p>
<h2 id="Redis实现方式"><a href="#Redis实现方式" class="headerlink" title="Redis实现方式"></a>Redis实现方式</h2><h3 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redisson分布式锁--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="配置Redisson-bean"><a href="#配置Redisson-bean" class="headerlink" title="配置Redisson bean"></a>配置Redisson bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Redisson <span class="title">redisson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//单机模式</span></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line"><span class="comment">//        config.useClusterServers().addNodeAddress("","","");//集群模式</span></span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">"redis://192.168.86.126:6379"</span>);</span><br><span class="line">        <span class="keyword">return</span> (Redisson) Redisson.create(config);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务代码加redis分布式锁</span></span><br><span class="line">      String lockKey = <span class="string">"redis-lock-key"</span>;</span><br><span class="line">      RLock rlock = redisson.getLock(lockKey);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//加锁并设置超时时间，自动续幂</span></span><br><span class="line">      rlock.lock(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//加锁业务代码</span></span><br><span class="line">          ……</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">//解锁</span></span><br><span class="line">          rlock.unlock();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Zookeeper实现"><a href="#Zookeeper实现" class="headerlink" title="Zookeeper实现"></a>Zookeeper实现</h2><h3 id="加入依赖-1"><a href="#加入依赖-1" class="headerlink" title="加入依赖"></a>加入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--zookeeper的jar依赖包--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="写一个抽象类AbstractZookeeperLock实现加锁和解锁"><a href="#写一个抽象类AbstractZookeeperLock实现加锁和解锁" class="headerlink" title="写一个抽象类AbstractZookeeperLock实现加锁和解锁"></a>写一个抽象类AbstractZookeeperLock实现加锁和解锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractZookeeperLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String lock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String zkAddress = <span class="string">"localhost:2181"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ZkClient zkClient = <span class="keyword">new</span> ZkClient(zkAddress);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试获取锁</span></span><br><span class="line">        <span class="keyword">if</span> (tryLock()) &#123;</span><br><span class="line">            <span class="comment">//拿到锁</span></span><br><span class="line">            System.out.println(<span class="string">"获取锁成功..."</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//尝试获取锁未成功，等待获取锁，阻塞</span></span><br><span class="line">            <span class="comment">// 如果此处已经不阻塞了，那么可以继续执行下面的代码</span></span><br><span class="line">            waitLock();</span><br><span class="line">            <span class="comment">//阻塞结束，继续获取锁</span></span><br><span class="line">            lock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//临时节点：临时存储，当客户端的链接与zookeeper断开后，临时节点自动删除</span></span><br><span class="line">        <span class="comment">//关闭链接就解锁了</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            zkClient.delete("/path/xxx");</span></span><br><span class="line">            zkClient.close();</span><br><span class="line">            System.out.println(<span class="string">"解锁成功..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//持久化节点：永久在zookeeper上</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">waitLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体使用类实现尝试获取锁和等待获取锁"><a href="#具体使用类实现尝试获取锁和等待获取锁" class="headerlink" title="具体使用类实现尝试获取锁和等待获取锁"></a>具体使用类实现尝试获取锁和等待获取锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperDistributedLock</span> <span class="keyword">extends</span> <span class="title">AbstractZookeeperLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZookeeperDistributedLock</span><span class="params">(String lockName)</span> </span>&#123;</span><br><span class="line">        lock = lockName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尝试获取锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建一个临时节点</span></span><br><span class="line">            zkClient.createEphemeral(lock);</span><br><span class="line">            <span class="comment">//获取锁成功</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//获取锁失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待获取锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">waitLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果已经有线程创建了临时节点，那么其他线程只能等待，不能再创建该临时节点</span></span><br><span class="line">        <span class="comment">//那么就监听你这个临时节点，如果该节点被删除了，那我等待结束，就又可以创建临时节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//订阅数据改变，就是监听参数中指定的那个节点</span></span><br><span class="line">        IZkDataListener listener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String s, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (countDownLatch != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//计数减1</span></span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//1、监听</span></span><br><span class="line">        zkClient.subscribeDataChanges(lock, listener);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2、判断那个锁的节点是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (zkClient.exists(lock)) &#123;</span><br><span class="line">            countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                countDownLatch.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        3、订阅要取消一下</span></span><br><span class="line">        zkClient.unsubscribeDataChanges(lock, listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务代码加zookeeper分布式锁</span></span><br><span class="line">   ZookeeperDistributedLock lock = <span class="keyword">new</span> ZookeeperDistributedLock(<span class="string">"/lock_nodeName"</span>);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       lock.lock();</span><br><span class="line">      <span class="comment">//加锁业务代码</span></span><br><span class="line">       ……</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据库实现"><a href="#数据库实现" class="headerlink" title="数据库实现"></a>数据库实现</h2><p>待补充</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的常用操作</title>
    <url>/2018/05/15/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="本地基本操作"><a href="#本地基本操作" class="headerlink" title="本地基本操作"></a>本地基本操作</h2><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><p>设置用户名</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span></span><br></pre></td></tr></table></figure>

<p>设置邮箱</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">"username@xxx.com"</span></span><br></pre></td></tr></table></figure>
<h3 id="创建本地库"><a href="#创建本地库" class="headerlink" title="创建本地库"></a>创建本地库</h3><p>使用某个目录作为git存储库，先进入这个目录，执行这个命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>创建目录并作为git存储库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git init newDir</span><br></pre></td></tr></table></figure>
<h3 id="添加工作区文件到暂存区"><a href="#添加工作区文件到暂存区" class="headerlink" title="添加工作区文件到暂存区"></a>添加工作区文件到暂存区</h3><p>添加多个文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add file1 file2</span><br></pre></td></tr></table></figure>

<p>命令执行目录下的所有文件，包括子文件夹中的文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>添加版本库已追踪的更新文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add -u</span><br></pre></td></tr></table></figure>

<p>添加版本库已追踪和未追踪的文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure>

<h3 id="提交暂存区文件到本地库"><a href="#提交暂存区文件到本地库" class="headerlink" title="提交暂存区文件到本地库"></a>提交暂存区文件到本地库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">"注释说明"</span></span><br></pre></td></tr></table></figure>

<p>修改注释说明，输入这个命令后会出现修改区域，注意只能修改最近提交的注释</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<p>修改的跟踪文件一步完成添加到暂存区和提交操作</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit -a -m <span class="string">"注释说明"</span></span><br></pre></td></tr></table></figure>
<h3 id="恢复文件到工作区"><a href="#恢复文件到工作区" class="headerlink" title="恢复文件到工作区"></a>恢复文件到工作区</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -- file1 file2  <span class="comment">#把暂存区文件恢复到工作区</span></span><br><span class="line">git checkout 指定版本号 目标file  <span class="comment">#从版本库中指定版本文件恢复到工作/暂存区</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行这其中当中某个命令后相当于撤销了本地文件的更改，恢复到暂存区或者本地库一致的状态，这个操作比较危险，应特别注意！</p>
</blockquote>
<h3 id="取消-amp-删除-amp-移动暂存区文件"><a href="#取消-amp-删除-amp-移动暂存区文件" class="headerlink" title="取消&amp;删除&amp;移动暂存区文件"></a>取消&amp;删除&amp;移动暂存区文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset file1  <span class="comment">#从暂存区取消git add的文件，这个操作并不会改变本地版本库。</span></span><br><span class="line">git rm -r -n --cached ./  <span class="comment">#预览要取消跟踪的文件</span></span><br><span class="line">git rm --cached file1  <span class="comment">#从暂存区移除并取消跟踪文件</span></span><br><span class="line">git rm file1  <span class="comment">#删除暂存区、git分支库和工作目录git跟踪的指定文件</span></span><br><span class="line">git mv file dir  <span class="comment">#移动暂存区文件到指定目录</span></span><br></pre></td></tr></table></figure>
<h3 id="版本库回退到之前的一个提交"><a href="#版本库回退到之前的一个提交" class="headerlink" title="版本库回退到之前的一个提交"></a>版本库回退到之前的一个提交</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset --soft head^  <span class="comment">#只将本地版本库回退到之前的一个提交，也可以将head^指定成commit-id</span></span><br><span class="line">git reset --mixed head^  <span class="comment">#只将本地版本库和暂存区回退到之前的一个提交</span></span><br><span class="line">git reset --hard head^  <span class="comment">#将本地版本库、暂存区和工作区回退到之前的一个提交</span></span><br><span class="line">``` sh</span><br><span class="line"><span class="comment">### 恢复回退掉的提交</span></span><br><span class="line">``` </span><br><span class="line">git reset --hard commit-id  <span class="comment">#可以通过git reflog命令查看commit-id信息</span></span><br></pre></td></tr></table></figure>

<h2 id="本地辅助操作"><a href="#本地辅助操作" class="headerlink" title="本地辅助操作"></a>本地辅助操作</h2><h3 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a>查看工作区状态</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s  <span class="comment">#简略的显示改动</span></span><br><span class="line">git status -uno  <span class="comment">#未被版本库跟踪的文件不显示</span></span><br></pre></td></tr></table></figure>
<h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> file  <span class="comment">#指定文件的日志</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline  <span class="comment">#只显示提交的commit-id和说明</span></span><br><span class="line">git <span class="built_in">log</span> --graph  <span class="comment">#可以看到分支合并图</span></span><br><span class="line"></span><br><span class="line">``` sh</span><br><span class="line"><span class="comment">### 查看所有操作记录</span></span><br><span class="line">``` </span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<p>文档对比</p>
<h2 id="本地分支操作"><a href="#本地分支操作" class="headerlink" title="本地分支操作"></a>本地分支操作</h2><h3 id="查看分支信息"><a href="#查看分支信息" class="headerlink" title="查看分支信息"></a>查看分支信息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch  <span class="comment">#列出本地的分支</span></span><br><span class="line">git branch -r  <span class="comment">#查看远程分支</span></span><br><span class="line">git branch -a  <span class="comment">#包括远程的分支</span></span><br></pre></td></tr></table></figure>
<h3 id="创建-amp-切换分支"><a href="#创建-amp-切换分支" class="headerlink" title="创建&amp;切换分支"></a>创建&amp;切换分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch dev  <span class="comment">#创建dev分支</span></span><br><span class="line">git checkout dev  <span class="comment">#切换到dev分支上</span></span><br><span class="line">git checkout -b bug  <span class="comment">#创建bug分支并切换到bug分支上</span></span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge dev  <span class="comment">#合并dev分支到当前分支</span></span><br><span class="line">git merge --no-ff -m <span class="string">"注释说明"</span> branch  <span class="comment">#不管有没有冲突文件都创建一个commit-id</span></span><br></pre></td></tr></table></figure>
<p>使用rebase合并分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rebase dev  <span class="comment">#合并dev分支</span></span><br><span class="line">git rebase --<span class="built_in">continue</span>  <span class="comment">#解决冲突之后执行git add .，然后执行这个命令继续合并分支</span></span><br><span class="line">git rebase --skip  <span class="comment">#如果冲突文件解决了也git add .了，执行git rebase --continue命令没作用就执行这个命令</span></span><br><span class="line">git rebase --abort  <span class="comment">#终止当前合并操作，使恢复到合并前的状态</span></span><br></pre></td></tr></table></figure>
<p>merge和rebase的区别</p>
<blockquote>
<p>merge 适用于团队合作分支的合并，rebase适用于对于本地个人使用的分支的合并</p>
</blockquote>
<h3 id="移动重命名-amp-删除分支"><a href="#移动重命名-amp-删除分支" class="headerlink" title="移动重命名&amp;删除分支"></a>移动重命名&amp;删除分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -m dev bug  <span class="comment">#将dev分支重命名为bug分支</span></span><br><span class="line">git branch -d dev  <span class="comment">#删除dev分支，如果有提交的话需要合并后才能删掉</span></span><br><span class="line">git branch -D bug  <span class="comment">#强制删除</span></span><br></pre></td></tr></table></figure>
<h3 id="储藏工作空间"><a href="#储藏工作空间" class="headerlink" title="储藏工作空间"></a>储藏工作空间</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash  <span class="comment">#储藏工作空间，如果希望把未跟踪的文件一起储藏，请先加到暂存区</span></span><br><span class="line">git stash list  <span class="comment">#查看储藏记录</span></span><br><span class="line">git stash pop  <span class="comment">#恢复并删除储藏记录</span></span><br><span class="line">git stash apply  <span class="comment">#从最近一个储藏恢复</span></span><br><span class="line">git stash apply stash@&#123;1&#125;  <span class="comment">#指定储藏恢复</span></span><br><span class="line">git stash drop  <span class="comment">#删除最近的储藏</span></span><br><span class="line">git stash drop stash@&#123;0&#125;  <span class="comment">#删除指定储藏</span></span><br><span class="line">git stash branch branchName  <span class="comment">#从储藏中创建分支</span></span><br></pre></td></tr></table></figure>

<h2 id="本地标签、归档"><a href="#本地标签、归档" class="headerlink" title="本地标签、归档"></a>本地标签、归档</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line">git tag -a v1.0  <span class="comment">#进入文本框输入注释说明</span></span><br><span class="line">git tag -a v1.0 -m <span class="string">'注释说明'</span>  <span class="comment">#创建标签加注释说明一次完成</span></span><br><span class="line">git tag -a v1.3 commit-id -m <span class="string">'标签说明'</span>  <span class="comment">#适用提交记录创建标签</span></span><br><span class="line">git tag  <span class="comment">#查看已有标签</span></span><br><span class="line">git show v1.1  <span class="comment">#查看标签版本信息</span></span><br></pre></td></tr></table></figure>
<h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -d v1.0</span><br></pre></td></tr></table></figure>
<p>归档<br>打包</p>
<h2 id="远程库操作"><a href="#远程库操作" class="headerlink" title="远程库操作"></a>远程库操作</h2><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repoUrl</span><br><span class="line">git <span class="built_in">clone</span> repoUrl newDir  <span class="comment">#克隆远程库到本地创建的newDir目录</span></span><br><span class="line">git <span class="built_in">clone</span> repoUrl --depth=1 <span class="comment">#加上深度为参数，为1即最后一次提交的记录</span></span><br></pre></td></tr></table></figure>
<h3 id="远程库关联"><a href="#远程库关联" class="headerlink" title="远程库关联"></a>远程库关联</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add origin repoUrl</span><br><span class="line">git remote rm origin  <span class="comment">#取消关联远程仓库</span></span><br><span class="line">git remote rename origin o1  <span class="comment">#重命名远程库</span></span><br><span class="line">git remote -v  <span class="comment">#所有远程库列表</span></span><br><span class="line">git remote show o1  <span class="comment">#远程库详情</span></span><br></pre></td></tr></table></figure>
<h3 id="远程分支操作"><a href="#远程分支操作" class="headerlink" title="远程分支操作"></a>远程分支操作</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/master master  <span class="comment">#master分支关联</span></span><br><span class="line">git push origin dev  <span class="comment">#创建远程分支，直接将本地创建的分支推送即可</span></span><br></pre></td></tr></table></figure>
<h3 id="推送到远程分支"><a href="#推送到远程分支" class="headerlink" title="推送到远程分支"></a>推送到远程分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push -u origin master  <span class="comment">#将分支master推送到远程库，第一次推送加-u参数关联master分支</span></span><br></pre></td></tr></table></figure>
<h3 id="获取远程更新到本地"><a href="#获取远程更新到本地" class="headerlink" title="获取远程更新到本地"></a>获取远程更新到本地</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch origin  <span class="comment">#不会覆盖暂存区和工作区</span></span><br><span class="line">git pull origin dev:dev</span><br><span class="line">git pull --rebase origin master  <span class="comment">#解决推送时提示的failed to push some refs to git错误</span></span><br></pre></td></tr></table></figure>
<h2 id="远程标签操作"><a href="#远程标签操作" class="headerlink" title="远程标签操作"></a>远程标签操作</h2><h3 id="推送本地标签"><a href="#推送本地标签" class="headerlink" title="推送本地标签"></a>推送本地标签</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin v1.0  </span><br><span class="line">git push origin --tags  <span class="comment">#将所有未推送的标签推送到远程库</span></span><br></pre></td></tr></table></figure>
<h3 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -d v1.0  <span class="comment">#先删除本地标签</span></span><br><span class="line">git push origin :refs/tags/v1.0  <span class="comment">#再删除远程标签</span></span><br></pre></td></tr></table></figure>
<h2 id="远程协同操作"><a href="#远程协同操作" class="headerlink" title="远程协同操作"></a>远程协同操作</h2><h3 id="打补丁-amp-使用补丁"><a href="#打补丁-amp-使用补丁" class="headerlink" title="打补丁&amp;使用补丁"></a>打补丁&amp;使用补丁</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git format-patch head^  <span class="comment">#使用最近一次提交来创建补丁</span></span><br><span class="line">git apply 补丁.patch  <span class="comment">#使用补丁</span></span><br><span class="line">git am 补丁.patch  <span class="comment">#打完补丁并提交，一般先执行 git am --abort</span></span><br><span class="line">git diff  <span class="comment">#对比文件，使用补丁后可以查看更改信息</span></span><br><span class="line">patch -R -p1 &lt; 补丁.patch  <span class="comment">#撤销使用的补丁</span></span><br></pre></td></tr></table></figure>
<h3 id="邮件补丁"><a href="#邮件补丁" class="headerlink" title="邮件补丁"></a>邮件补丁</h3><p>待补充</p>
<h2 id="远程环境设置操作"><a href="#远程环境设置操作" class="headerlink" title="远程环境设置操作"></a>远程环境设置操作</h2><h3 id="ssh-key设置"><a href="#ssh-key设置" class="headerlink" title="ssh-key设置"></a>ssh-key设置</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen  -t rsa –C <span class="string">"账户邮箱"</span>  <span class="comment">#使用这个生成秘钥</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行以上命令后,在操作系统的用户目录下找到.ssh文件，打开里面的id_rsa.pub，这个是公钥，将里面的内容拷贝，在游览器点开码云账户设置里面找到SSH公钥，添加公钥，标题随便填，然后把刚才拷贝的公钥粘贴到公钥value下，点确定，然后让你输入密码，完成！</p>
</blockquote>
<h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>待补充</p>
<h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>待补充</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
