<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git的常用操作</title>
    <url>/2018/05/15/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="本地基本操作"><a href="#本地基本操作" class="headerlink" title="本地基本操作"></a>本地基本操作</h2><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;username@xxx.com&quot;</span><br></pre></td></tr></table></figure>
<h3 id="创建本地库"><a href="#创建本地库" class="headerlink" title="创建本地库"></a>创建本地库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init  #使用某个目录作为git存储库，先进入这个目录，执行这个命令</span><br><span class="line">git init newDir  #创建目录并作为git存储库</span><br></pre></td></tr></table></figure>
<h3 id="添加工作区文件到暂存区"><a href="#添加工作区文件到暂存区" class="headerlink" title="添加工作区文件到暂存区"></a>添加工作区文件到暂存区</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add file1 file2</span><br><span class="line">git add .  #命令执行目录下的所有文件，包括子文件夹中的文件</span><br><span class="line">git add -u  #添加版本库已追踪的更新文件</span><br><span class="line">git add -A  #添加版本库已追踪和未追踪的文件</span><br></pre></td></tr></table></figure>
<h3 id="提交暂存区文件到本地库"><a href="#提交暂存区文件到本地库" class="headerlink" title="提交暂存区文件到本地库"></a>提交暂存区文件到本地库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;注释说明&quot;</span><br><span class="line">git commit --amend  #修改注释说明，输入这个命令后会出现修改区域，注意只能修改最近提交的注释</span><br><span class="line">git commit -a -m &quot;注释说明&quot;  #修改的跟踪文件一步完成添加到暂存区和提交操作</span><br></pre></td></tr></table></figure>
<h3 id="恢复文件到工作区"><a href="#恢复文件到工作区" class="headerlink" title="恢复文件到工作区"></a>恢复文件到工作区</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- file1 file2  #把暂存区文件恢复到工作区</span><br><span class="line">git checkout 指定版本号 目标file  #从版本库中指定版本文件恢复到工作&#x2F;暂存区</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行这其中当中某个命令后相当于撤销了本地文件的更改，恢复到暂存区或者本地库一致的状态，这个操作比较危险，应特别注意！</p>
</blockquote>
<h3 id="取消-amp-删除-amp-移动暂存区文件"><a href="#取消-amp-删除-amp-移动暂存区文件" class="headerlink" title="取消&amp;删除&amp;移动暂存区文件"></a>取消&amp;删除&amp;移动暂存区文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset file1  #从暂存区取消git add的文件，这个操作并不会改变本地版本库。</span><br><span class="line">git rm -r -n --cached .&#x2F;  #预览要取消跟踪的文件</span><br><span class="line">git rm --cached file1  #从暂存区移除并取消跟踪文件</span><br><span class="line">git rm file1  #删除暂存区、git分支库和工作目录git跟踪的指定文件</span><br><span class="line">git mv file dir  #移动暂存区文件到指定目录</span><br></pre></td></tr></table></figure>
<h3 id="版本库回退到之前的一个提交"><a href="#版本库回退到之前的一个提交" class="headerlink" title="版本库回退到之前的一个提交"></a>版本库回退到之前的一个提交</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --soft head^  #只将本地版本库回退到之前的一个提交，也可以将head^指定成commit-id</span><br><span class="line">git reset --mixed head^  #只将本地版本库和暂存区回退到之前的一个提交</span><br><span class="line">git reset --hard head^  #将本地版本库、暂存区和工作区回退到之前的一个提交</span><br></pre></td></tr></table></figure>
<h3 id="恢复回退掉的提交"><a href="#恢复回退掉的提交" class="headerlink" title="恢复回退掉的提交"></a>恢复回退掉的提交</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reset --hard commit-id  #可以通过git reflog命令查看commit-id信息</span><br></pre></td></tr></table></figure>

<h2 id="本地辅助操作"><a href="#本地辅助操作" class="headerlink" title="本地辅助操作"></a>本地辅助操作</h2><h3 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a>查看工作区状态</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git status -s  #简略的显示改动</span><br><span class="line">git status -uno  #未被版本库跟踪的文件不显示</span><br></pre></td></tr></table></figure>
<h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">git log file  #指定文件的日志</span><br><span class="line">git log --pretty&#x3D;oneline  #只显示提交的commit-id和说明</span><br><span class="line">git log --graph  #可以看到分支合并图</span><br></pre></td></tr></table></figure>
<h3 id="查看所有操作记录"><a href="#查看所有操作记录" class="headerlink" title="查看所有操作记录"></a>查看所有操作记录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<p>文档对比</p>
<h2 id="本地分支操作"><a href="#本地分支操作" class="headerlink" title="本地分支操作"></a>本地分支操作</h2><h3 id="查看分支信息"><a href="#查看分支信息" class="headerlink" title="查看分支信息"></a>查看分支信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch  #列出本地的分支</span><br><span class="line">git branch -r  #查看远程分支</span><br><span class="line">git branch -a  #包括远程的分支</span><br></pre></td></tr></table></figure>
<h3 id="创建-amp-切换分支"><a href="#创建-amp-切换分支" class="headerlink" title="创建&amp;切换分支"></a>创建&amp;切换分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch dev  #创建dev分支</span><br><span class="line">git checkout dev  #切换到dev分支上</span><br><span class="line">git checkout -b bug  #创建bug分支并切换到bug分支上</span><br></pre></td></tr></table></figure>
<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git merge dev  #合并dev分支到当前分支</span><br><span class="line">git merge --no-ff -m &quot;注释说明&quot; branch  #不管有没有冲突文件都创建一个commit-id</span><br></pre></td></tr></table></figure>
<p>使用rebase合并分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase dev  #合并dev分支</span><br><span class="line">git rebase --continue  #解决冲突之后执行git add .，然后执行这个命令继续合并分支</span><br><span class="line">git rebase --skip  #如果冲突文件解决了也git add .了，执行git rebase --continue命令没作用就执行这个命令</span><br><span class="line">git rebase --abort  #终止当前合并操作，使恢复到合并前的状态</span><br></pre></td></tr></table></figure>
<p>merge和rebase的区别</p>
<blockquote>
<p>merge 适用于团队合作分支的合并，rebase适用于对于本地个人使用的分支的合并</p>
</blockquote>
<h3 id="移动重命名-amp-删除分支"><a href="#移动重命名-amp-删除分支" class="headerlink" title="移动重命名&amp;删除分支"></a>移动重命名&amp;删除分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -m dev bug  #将dev分支重命名为bug分支</span><br><span class="line">git branch -d dev  #删除dev分支，如果有提交的话需要合并后才能删掉</span><br><span class="line">git branch -D bug  #强制删除</span><br></pre></td></tr></table></figure>
<h3 id="储藏工作空间"><a href="#储藏工作空间" class="headerlink" title="储藏工作空间"></a>储藏工作空间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash  #储藏工作空间，如果希望把未跟踪的文件一起储藏，请先加到暂存区</span><br><span class="line">git stash list  #查看储藏记录</span><br><span class="line">git stash pop  #恢复并删除储藏记录</span><br><span class="line">git stash apply  #从最近一个储藏恢复</span><br><span class="line">git stash apply stash@&#123;1&#125;  #指定储藏恢复</span><br><span class="line">git stash drop  #删除最近的储藏</span><br><span class="line">git stash drop stash@&#123;0&#125;  #删除指定储藏</span><br><span class="line">git stash branch branchName  #从储藏中创建分支</span><br></pre></td></tr></table></figure>

<h2 id="本地标签、归档"><a href="#本地标签、归档" class="headerlink" title="本地标签、归档"></a>本地标签、归档</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag v1.0</span><br><span class="line">git tag -a v1.0  #进入文本框输入注释说明</span><br><span class="line">git tag -a v1.0 -m &#39;注释说明&#39;  #创建标签加注释说明一次完成</span><br><span class="line">git tag -a v1.3 commit-id -m &#39;标签说明&#39;  #适用提交记录创建标签</span><br><span class="line">git tag  #查看已有标签</span><br><span class="line">git show v1.1  #查看标签版本信息</span><br></pre></td></tr></table></figure>
<h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -d v1.0</span><br></pre></td></tr></table></figure>
<p>归档<br>打包</p>
<h2 id="远程库操作"><a href="#远程库操作" class="headerlink" title="远程库操作"></a>远程库操作</h2><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone repoUrl</span><br><span class="line">git clone repoUrl newDir  #克隆远程库到本地创建的newDir目录</span><br><span class="line">git clone repoUrl --depth&#x3D;1 #加上深度为参数，为1即最后一次提交的记录</span><br></pre></td></tr></table></figure>
<h3 id="远程库关联"><a href="#远程库关联" class="headerlink" title="远程库关联"></a>远程库关联</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin repoUrl</span><br><span class="line">git remote rm origin  #取消关联远程仓库</span><br><span class="line">git remote rename origin o1  #重命名远程库</span><br><span class="line">git remote -v  #所有远程库列表</span><br><span class="line">git remote show o1  #远程库详情</span><br></pre></td></tr></table></figure>
<h3 id="远程分支操作"><a href="#远程分支操作" class="headerlink" title="远程分支操作"></a>远程分支操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;master master  #master分支关联</span><br><span class="line">git push origin dev  #创建远程分支，直接将本地创建的分支推送即可</span><br></pre></td></tr></table></figure>
<h3 id="推送到远程分支"><a href="#推送到远程分支" class="headerlink" title="推送到远程分支"></a>推送到远程分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin master  #将分支master推送到远程库，第一次推送加-u参数关联master分支</span><br></pre></td></tr></table></figure>
<h3 id="获取远程更新到本地"><a href="#获取远程更新到本地" class="headerlink" title="获取远程更新到本地"></a>获取远程更新到本地</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git fetch origin  #不会覆盖暂存区和工作区</span><br><span class="line">git pull origin dev:dev</span><br><span class="line">git pull --rebase origin master  #解决推送时提示的failed to push some refs to git错误</span><br></pre></td></tr></table></figure>
<h2 id="远程标签操作"><a href="#远程标签操作" class="headerlink" title="远程标签操作"></a>远程标签操作</h2><h3 id="推送本地标签"><a href="#推送本地标签" class="headerlink" title="推送本地标签"></a>推送本地标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin v1.0  </span><br><span class="line">git push origin --tags  #将所有未推送的标签推送到远程库</span><br></pre></td></tr></table></figure>
<h3 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git tag -d v1.0  #先删除本地标签</span><br><span class="line">git push origin :refs&#x2F;tags&#x2F;v1.0  #再删除远程标签</span><br></pre></td></tr></table></figure>
<h2 id="远程协同操作"><a href="#远程协同操作" class="headerlink" title="远程协同操作"></a>远程协同操作</h2><h3 id="打补丁-amp-使用补丁"><a href="#打补丁-amp-使用补丁" class="headerlink" title="打补丁&amp;使用补丁"></a>打补丁&amp;使用补丁</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git format-patch head^  #使用最近一次提交来创建补丁</span><br><span class="line">git apply 补丁.patch  #使用补丁</span><br><span class="line">git am 补丁.patch  #打完补丁并提交，一般先执行 git am --abort</span><br><span class="line">git diff  #对比文件，使用补丁后可以查看更改信息</span><br><span class="line">patch -R -p1 &lt; 补丁.patch  #撤销使用的补丁</span><br></pre></td></tr></table></figure>
<h3 id="邮件补丁"><a href="#邮件补丁" class="headerlink" title="邮件补丁"></a>邮件补丁</h3><p>待补充</p>
<h2 id="远程环境设置操作"><a href="#远程环境设置操作" class="headerlink" title="远程环境设置操作"></a>远程环境设置操作</h2><h3 id="ssh-key设置"><a href="#ssh-key设置" class="headerlink" title="ssh-key设置"></a>ssh-key设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen  -t rsa –C &quot;账户邮箱&quot;  #使用这个生成秘钥</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行以上命令后,在操作系统的用户目录下找到.ssh文件，打开里面的id_rsa.pub，这个是公钥，将里面的内容拷贝，在游览器点开码云账户设置里面找到SSH公钥，添加公钥，标题随便填，然后把刚才拷贝的公钥粘贴到公钥value下，点确定，然后让你输入密码，完成！</p>
</blockquote>
<h3 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h3><p>待补充</p>
<h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>待补充</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
